/* automatically generated by rust-bindgen */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type VALUE = ::std::os::raw::c_ulong;
pub type ID = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RBasic {
    pub flags: VALUE,
    pub klass: VALUE,
}
#[test]
fn bindgen_test_layout_RBasic() {
    assert_eq!(
        ::std::mem::size_of::<RBasic>(),
        16usize,
        concat!("Size of: ", stringify!(RBasic))
    );
    assert_eq!(
        ::std::mem::align_of::<RBasic>(),
        8usize,
        concat!("Alignment of ", stringify!(RBasic))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBasic>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RBasic),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBasic>())).klass as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RBasic),
            "::",
            stringify!(klass)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RObject {
    pub basic: RBasic,
    pub as_: RObject__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RObject__bindgen_ty_1 {
    pub heap: RObject__bindgen_ty_1__bindgen_ty_1,
    pub ary: [VALUE; 3usize],
    _bindgen_union_align: [u64; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RObject__bindgen_ty_1__bindgen_ty_1 {
    pub numiv: u32,
    pub ivptr: *mut VALUE,
    pub iv_index_tbl: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_RObject__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RObject__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(RObject__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<RObject__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(RObject__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RObject__bindgen_ty_1__bindgen_ty_1>())).numiv as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RObject__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(numiv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RObject__bindgen_ty_1__bindgen_ty_1>())).ivptr as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RObject__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ivptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RObject__bindgen_ty_1__bindgen_ty_1>())).iv_index_tbl as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RObject__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(iv_index_tbl)
        )
    );
}
#[test]
fn bindgen_test_layout_RObject__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RObject__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(RObject__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<RObject__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(RObject__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RObject__bindgen_ty_1>())).heap as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RObject__bindgen_ty_1),
            "::",
            stringify!(heap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RObject__bindgen_ty_1>())).ary as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RObject__bindgen_ty_1),
            "::",
            stringify!(ary)
        )
    );
}
impl ::std::fmt::Debug for RObject__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "RObject__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_RObject() {
    assert_eq!(
        ::std::mem::size_of::<RObject>(),
        40usize,
        concat!("Size of: ", stringify!(RObject))
    );
    assert_eq!(
        ::std::mem::align_of::<RObject>(),
        8usize,
        concat!("Alignment of ", stringify!(RObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RObject>())).basic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RObject),
            "::",
            stringify!(basic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RObject>())).as_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RObject),
            "::",
            stringify!(as_)
        )
    );
}
impl ::std::fmt::Debug for RObject {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "RObject {{ basic: {:?}, as: {:?} }}",
            self.basic, self.as_
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RString {
    pub basic: RBasic,
    pub as_: RString__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RString__bindgen_ty_1 {
    pub heap: RString__bindgen_ty_1__bindgen_ty_1,
    pub ary: [::std::os::raw::c_char; 24usize],
    _bindgen_union_align: [u64; 3usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RString__bindgen_ty_1__bindgen_ty_1 {
    pub len: ::std::os::raw::c_long,
    pub ptr: *mut ::std::os::raw::c_char,
    pub aux: RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub capa: ::std::os::raw::c_long,
    pub shared: VALUE,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>())).capa
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(capa)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>())).shared
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(shared)
        )
    );
}
impl ::std::fmt::Debug for RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {{ union }}"
        )
    }
}
#[test]
fn bindgen_test_layout_RString__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RString__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(RString__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<RString__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RString__bindgen_ty_1__bindgen_ty_1>())).len as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RString__bindgen_ty_1__bindgen_ty_1>())).ptr as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RString__bindgen_ty_1__bindgen_ty_1>())).aux as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(aux)
        )
    );
}
impl ::std::fmt::Debug for RString__bindgen_ty_1__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "RString__bindgen_ty_1__bindgen_ty_1 {{ len: {:?}, ptr: {:?}, aux: {:?} }}",
            self.len, self.ptr, self.aux
        )
    }
}
#[test]
fn bindgen_test_layout_RString__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RString__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(RString__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<RString__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(RString__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RString__bindgen_ty_1>())).heap as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RString__bindgen_ty_1),
            "::",
            stringify!(heap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RString__bindgen_ty_1>())).ary as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RString__bindgen_ty_1),
            "::",
            stringify!(ary)
        )
    );
}
impl ::std::fmt::Debug for RString__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "RString__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_RString() {
    assert_eq!(
        ::std::mem::size_of::<RString>(),
        40usize,
        concat!("Size of: ", stringify!(RString))
    );
    assert_eq!(
        ::std::mem::align_of::<RString>(),
        8usize,
        concat!("Alignment of ", stringify!(RString))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RString>())).basic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RString),
            "::",
            stringify!(basic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RString>())).as_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RString),
            "::",
            stringify!(as_)
        )
    );
}
impl ::std::fmt::Debug for RString {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "RString {{ basic: {:?}, as: {:?} }}",
            self.basic, self.as_
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RArray {
    pub basic: RBasic,
    pub as_: RArray__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RArray__bindgen_ty_1 {
    pub heap: RArray__bindgen_ty_1__bindgen_ty_1,
    pub ary: [VALUE; 3usize],
    _bindgen_union_align: [u64; 3usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RArray__bindgen_ty_1__bindgen_ty_1 {
    pub len: ::std::os::raw::c_long,
    pub aux: RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub ptr: *const VALUE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub capa: ::std::os::raw::c_long,
    pub shared: VALUE,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>())).capa
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(capa)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>())).shared
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(shared)
        )
    );
}
impl ::std::fmt::Debug for RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {{ union }}"
        )
    }
}
#[test]
fn bindgen_test_layout_RArray__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RArray__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(RArray__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<RArray__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(RArray__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RArray__bindgen_ty_1__bindgen_ty_1>())).len as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RArray__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RArray__bindgen_ty_1__bindgen_ty_1>())).aux as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RArray__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(aux)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RArray__bindgen_ty_1__bindgen_ty_1>())).ptr as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RArray__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ptr)
        )
    );
}
impl ::std::fmt::Debug for RArray__bindgen_ty_1__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "RArray__bindgen_ty_1__bindgen_ty_1 {{ len: {:?}, aux: {:?}, ptr: {:?} }}",
            self.len, self.aux, self.ptr
        )
    }
}
#[test]
fn bindgen_test_layout_RArray__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RArray__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(RArray__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<RArray__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(RArray__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RArray__bindgen_ty_1>())).heap as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RArray__bindgen_ty_1),
            "::",
            stringify!(heap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RArray__bindgen_ty_1>())).ary as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RArray__bindgen_ty_1),
            "::",
            stringify!(ary)
        )
    );
}
impl ::std::fmt::Debug for RArray__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "RArray__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_RArray() {
    assert_eq!(
        ::std::mem::size_of::<RArray>(),
        40usize,
        concat!("Size of: ", stringify!(RArray))
    );
    assert_eq!(
        ::std::mem::align_of::<RArray>(),
        8usize,
        concat!("Alignment of ", stringify!(RArray))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RArray>())).basic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RArray),
            "::",
            stringify!(basic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RArray>())).as_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RArray),
            "::",
            stringify!(as_)
        )
    );
}
impl ::std::fmt::Debug for RArray {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "RArray {{ basic: {:?}, as: {:?} }}",
            self.basic, self.as_
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RData {
    pub basic: RBasic,
    pub dmark: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub dfree: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_RData() {
    assert_eq!(
        ::std::mem::size_of::<RData>(),
        40usize,
        concat!("Size of: ", stringify!(RData))
    );
    assert_eq!(
        ::std::mem::align_of::<RData>(),
        8usize,
        concat!("Alignment of ", stringify!(RData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RData>())).basic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RData),
            "::",
            stringify!(basic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RData>())).dmark as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RData),
            "::",
            stringify!(dmark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RData>())).dfree as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RData),
            "::",
            stringify!(dfree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RData>())).data as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RData),
            "::",
            stringify!(data)
        )
    );
}
pub type rb_data_type_t = rb_data_type_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_data_type_struct {
    pub wrap_struct_name: *const ::std::os::raw::c_char,
    pub function: rb_data_type_struct__bindgen_ty_1,
    pub parent: *const rb_data_type_t,
    pub data: *mut ::std::os::raw::c_void,
    pub flags: VALUE,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_data_type_struct__bindgen_ty_1 {
    pub dmark: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub dfree: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub dsize:
        ::std::option::Option<unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> usize>,
    pub reserved: [*mut ::std::os::raw::c_void; 2usize],
}
#[test]
fn bindgen_test_layout_rb_data_type_struct__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<rb_data_type_struct__bindgen_ty_1>(),
        40usize,
        concat!("Size of: ", stringify!(rb_data_type_struct__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_data_type_struct__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(rb_data_type_struct__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rb_data_type_struct__bindgen_ty_1>())).dmark as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_data_type_struct__bindgen_ty_1),
            "::",
            stringify!(dmark)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rb_data_type_struct__bindgen_ty_1>())).dfree as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_data_type_struct__bindgen_ty_1),
            "::",
            stringify!(dfree)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rb_data_type_struct__bindgen_ty_1>())).dsize as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_data_type_struct__bindgen_ty_1),
            "::",
            stringify!(dsize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rb_data_type_struct__bindgen_ty_1>())).reserved as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_data_type_struct__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
}
#[test]
fn bindgen_test_layout_rb_data_type_struct() {
    assert_eq!(
        ::std::mem::size_of::<rb_data_type_struct>(),
        72usize,
        concat!("Size of: ", stringify!(rb_data_type_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_data_type_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(rb_data_type_struct))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rb_data_type_struct>())).wrap_struct_name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_data_type_struct),
            "::",
            stringify!(wrap_struct_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rb_data_type_struct>())).function as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_data_type_struct),
            "::",
            stringify!(function)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rb_data_type_struct>())).parent as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_data_type_struct),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rb_data_type_struct>())).data as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_data_type_struct),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rb_data_type_struct>())).flags as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_data_type_struct),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTypedData {
    pub basic: RBasic,
    pub type_: *const rb_data_type_t,
    pub typed_flag: VALUE,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_RTypedData() {
    assert_eq!(
        ::std::mem::size_of::<RTypedData>(),
        40usize,
        concat!("Size of: ", stringify!(RTypedData))
    );
    assert_eq!(
        ::std::mem::align_of::<RTypedData>(),
        8usize,
        concat!("Alignment of ", stringify!(RTypedData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RTypedData>())).basic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTypedData),
            "::",
            stringify!(basic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RTypedData>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RTypedData),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RTypedData>())).typed_flag as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RTypedData),
            "::",
            stringify!(typed_flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RTypedData>())).data as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RTypedData),
            "::",
            stringify!(data)
        )
    );
}
pub type st_data_t = ::std::os::raw::c_ulong;
pub type st_index_t = st_data_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_hash_type {
    pub compare: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub hash: ::std::option::Option<unsafe extern "C" fn() -> st_index_t>,
}
#[test]
fn bindgen_test_layout_st_hash_type() {
    assert_eq!(
        ::std::mem::size_of::<st_hash_type>(),
        16usize,
        concat!("Size of: ", stringify!(st_hash_type))
    );
    assert_eq!(
        ::std::mem::align_of::<st_hash_type>(),
        8usize,
        concat!("Alignment of ", stringify!(st_hash_type))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_hash_type>())).compare as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(st_hash_type),
            "::",
            stringify!(compare)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_hash_type>())).hash as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(st_hash_type),
            "::",
            stringify!(hash)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_table_entry {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_table {
    pub entry_power: ::std::os::raw::c_uchar,
    pub bin_power: ::std::os::raw::c_uchar,
    pub size_ind: ::std::os::raw::c_uchar,
    pub rebuilds_num: ::std::os::raw::c_uint,
    pub type_: *const st_hash_type,
    pub num_entries: st_index_t,
    pub bins: *mut st_index_t,
    pub entries_start: st_index_t,
    pub entries_bound: st_index_t,
    pub entries: *mut st_table_entry,
}
#[test]
fn bindgen_test_layout_st_table() {
    assert_eq!(
        ::std::mem::size_of::<st_table>(),
        56usize,
        concat!("Size of: ", stringify!(st_table))
    );
    assert_eq!(
        ::std::mem::align_of::<st_table>(),
        8usize,
        concat!("Alignment of ", stringify!(st_table))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_table>())).entry_power as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(st_table),
            "::",
            stringify!(entry_power)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_table>())).bin_power as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(st_table),
            "::",
            stringify!(bin_power)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_table>())).size_ind as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(st_table),
            "::",
            stringify!(size_ind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_table>())).rebuilds_num as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(st_table),
            "::",
            stringify!(rebuilds_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_table>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(st_table),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_table>())).num_entries as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(st_table),
            "::",
            stringify!(num_entries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_table>())).bins as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(st_table),
            "::",
            stringify!(bins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_table>())).entries_start as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(st_table),
            "::",
            stringify!(entries_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_table>())).entries_bound as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(st_table),
            "::",
            stringify!(entries_bound)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_table>())).entries as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(st_table),
            "::",
            stringify!(entries)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_st_foreach"]
    pub fn st_foreach(
        arg1: *mut st_table,
        arg2: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
        arg3: st_data_t,
    ) -> ::std::os::raw::c_int;
}
pub type rb_alloc_func_t = ::std::option::Option<unsafe extern "C" fn(arg1: VALUE) -> VALUE>;
pub type rb_subclass_entry_t = rb_subclass_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_subclass_entry {
    pub klass: VALUE,
    pub next: *mut rb_subclass_entry_t,
}
#[test]
fn bindgen_test_layout_rb_subclass_entry() {
    assert_eq!(
        ::std::mem::size_of::<rb_subclass_entry>(),
        16usize,
        concat!("Size of: ", stringify!(rb_subclass_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_subclass_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(rb_subclass_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rb_subclass_entry>())).klass as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_subclass_entry),
            "::",
            stringify!(klass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rb_subclass_entry>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_subclass_entry),
            "::",
            stringify!(next)
        )
    );
}
pub type rb_serial_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_classext_struct {
    pub iv_index_tbl: *mut st_table,
    pub iv_tbl: *mut st_table,
    pub const_tbl: *mut rb_id_table,
    pub callable_m_tbl: *mut rb_id_table,
    pub subclasses: *mut rb_subclass_entry_t,
    pub parent_subclasses: *mut *mut rb_subclass_entry_t,
    #[doc = " In the case that this is an `ICLASS`, `module_subclasses` points to the link"]
    #[doc = " in the module\'s `subclasses` list that indicates that the klass has been"]
    #[doc = " included. Hopefully that makes sense."]
    pub module_subclasses: *mut *mut rb_subclass_entry_t,
    pub class_serial: rb_serial_t,
    pub origin_: VALUE,
    pub refined_class: VALUE,
    pub allocator: rb_alloc_func_t,
}
#[test]
fn bindgen_test_layout_rb_classext_struct() {
    assert_eq!(
        ::std::mem::size_of::<rb_classext_struct>(),
        88usize,
        concat!("Size of: ", stringify!(rb_classext_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_classext_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(rb_classext_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rb_classext_struct>())).iv_index_tbl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_classext_struct),
            "::",
            stringify!(iv_index_tbl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rb_classext_struct>())).iv_tbl as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_classext_struct),
            "::",
            stringify!(iv_tbl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rb_classext_struct>())).const_tbl as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_classext_struct),
            "::",
            stringify!(const_tbl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rb_classext_struct>())).callable_m_tbl as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_classext_struct),
            "::",
            stringify!(callable_m_tbl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rb_classext_struct>())).subclasses as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_classext_struct),
            "::",
            stringify!(subclasses)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rb_classext_struct>())).parent_subclasses as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_classext_struct),
            "::",
            stringify!(parent_subclasses)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rb_classext_struct>())).module_subclasses as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_classext_struct),
            "::",
            stringify!(module_subclasses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rb_classext_struct>())).class_serial as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_classext_struct),
            "::",
            stringify!(class_serial)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rb_classext_struct>())).origin_ as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_classext_struct),
            "::",
            stringify!(origin_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rb_classext_struct>())).refined_class as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_classext_struct),
            "::",
            stringify!(refined_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rb_classext_struct>())).allocator as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_classext_struct),
            "::",
            stringify!(allocator)
        )
    );
}
pub type rb_classext_t = rb_classext_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RClass {
    pub basic: RBasic,
    pub super_: VALUE,
    pub ptr: *mut rb_classext_t,
    pub m_tbl: *mut rb_id_table,
}
#[test]
fn bindgen_test_layout_RClass() {
    assert_eq!(
        ::std::mem::size_of::<RClass>(),
        40usize,
        concat!("Size of: ", stringify!(RClass))
    );
    assert_eq!(
        ::std::mem::align_of::<RClass>(),
        8usize,
        concat!("Alignment of ", stringify!(RClass))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RClass>())).basic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RClass),
            "::",
            stringify!(basic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RClass>())).super_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RClass),
            "::",
            stringify!(super_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RClass>())).ptr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RClass),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RClass>())).m_tbl as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RClass),
            "::",
            stringify!(m_tbl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_id_table {
    _unused: [u8; 0],
}
pub const rb_id_table_iterator_result_ID_TABLE_CONTINUE: rb_id_table_iterator_result = 0;
pub const rb_id_table_iterator_result_ID_TABLE_STOP: rb_id_table_iterator_result = 1;
pub const rb_id_table_iterator_result_ID_TABLE_DELETE: rb_id_table_iterator_result = 2;
pub const rb_id_table_iterator_result_ID_TABLE_ITERATOR_RESULT_END: rb_id_table_iterator_result = 3;
pub type rb_id_table_iterator_result = u32;
extern "C" {
    #[link_name = "\u{1}_rb_id_table_memsize"]
    pub fn rb_id_table_memsize(tbl: *const rb_id_table) -> usize;
}
pub type rb_id_table_foreach_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        id: ID,
        val: VALUE,
        data: *mut ::std::os::raw::c_void,
    ) -> rb_id_table_iterator_result,
>;
extern "C" {
    #[link_name = "\u{1}_rb_id_table_foreach"]
    pub fn rb_id_table_foreach(
        tbl: *mut rb_id_table,
        func: rb_id_table_foreach_func_t,
        data: *mut ::std::os::raw::c_void,
    );
}
pub const rb_const_flag_t_CONST_DEPRECATED: rb_const_flag_t = 256;
pub const rb_const_flag_t_CONST_VISIBILITY_MASK: rb_const_flag_t = 255;
pub const rb_const_flag_t_CONST_PUBLIC: rb_const_flag_t = 0;
pub const rb_const_flag_t_CONST_PRIVATE: rb_const_flag_t = 1;
pub const rb_const_flag_t_CONST_VISIBILITY_MAX: rb_const_flag_t = 2;
pub type rb_const_flag_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_const_entry_struct {
    pub flag: rb_const_flag_t,
    pub line: ::std::os::raw::c_int,
    pub value: VALUE,
    pub file: VALUE,
}
#[test]
fn bindgen_test_layout_rb_const_entry_struct() {
    assert_eq!(
        ::std::mem::size_of::<rb_const_entry_struct>(),
        24usize,
        concat!("Size of: ", stringify!(rb_const_entry_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_const_entry_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(rb_const_entry_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rb_const_entry_struct>())).flag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_const_entry_struct),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rb_const_entry_struct>())).line as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_const_entry_struct),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rb_const_entry_struct>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_const_entry_struct),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rb_const_entry_struct>())).file as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_const_entry_struct),
            "::",
            stringify!(file)
        )
    );
}
